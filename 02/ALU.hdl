// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
//Completed by Charlotte Roux 12/11/2023
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)
//At logic so if zero do not negate?
    PARTS:
   //Sets zeroing to correct bit for bitwise AND.
   Not(in=zx, out=negZX);
   Not(in=zy, out=negZY);
   And1x16(a=x,b=negZX,out=intX1);
   And1x16(a=y,b=negZY,out=intY1);
   
   //XOR bitwise for negation of input
   Xor1x16(a=intX1, b=nx,out=intX2);
   Xor1x16(a=intY1, b=ny,out=intY2);
   //Adds together and then resolves if and operation by bitwise and with f.
   
   Add16(a=intX2,b=intY2,out=intAdd);
   And16(a=intX2, b=intY2,out=intAnd);
   Mux16(a=intAnd, b=intAdd,sel=f,out=intOut);
   //Solution negate
   
   Xor1x16(a=intOut,b=no,out=internalOut);
   //Not Neg helper chip test 
   notNeg(a=internalOut,out=ng);
   //Solve for if zero
   Or16Way(in=internalOut,out=inZR);
   Not(in=inZR, out=zr);
   //Output with identity xor	
   Xor1x16(a=internalOut,b=false, out=out);
  
      
   
}
